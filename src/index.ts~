// src/index.ts
import { ArbitrageBot } from './arbitrage/ArbitrageBot';
import { logger } from './utils/Logger';
import { config } from './config/Config';
import dotenv from 'dotenv';

dotenv.config();

async function main() {
  try {
    // Load required environment variables
    const { 
      FLASH_LOAN_ADDRESS, 
      PRIVATE_KEY, 
      RPC_URL, 
      WS_RPC_URL 
    } = process.env;
    
    // Validate required environment variables
    if (!FLASH_LOAN_ADDRESS) throw new Error('FLASH_LOAN_ADDRESS environment variable is not set');
    if (!PRIVATE_KEY) throw new Error('PRIVATE_KEY environment variable is not set');
    if (!RPC_URL) throw new Error('RPC_URL environment variable is not set');

    // Initialize and start the arbitrage bot
    const arbitrageBot = new ArbitrageBot(
      FLASH_LOAN_ADDRESS, 
      PRIVATE_KEY, 
      RPC_URL, 
      WS_RPC_URL
    );

    // Register event handlers
    arbitrageBot.on('started', () => {
      logger.info('ArbitrageBot has started successfully');
    });

    arbitrageBot.on('stopped', () => {
      logger.info('ArbitrageBot has stopped');
    });

    arbitrageBot.on('error', ({ operation, error }) => {
      logger.error(`Error in operation ${operation}: ${error.message}`);
    });

    arbitrageBot.on('execution', ({ strategy, success, profit }) => {
      if (success) {
        logger.info(`Successful arbitrage execution: ${strategy.pair} with profit ${profit} ${strategy.baseToken.symbol}`);
      } else {
        logger.warn(`Failed arbitrage execution: ${strategy.pair}`);
      }
    });

    // Start the bot
    await arbitrageBot.start();

    // Setup graceful shutdown
    const shutdown = () => {
      logger.info('Shutdown signal received, stopping ArbitrageBot...');
      arbitrageBot.stop();
      setTimeout(() => {
        logger.info('Shutdown complete');
        process.exit(0);
      }, 1000);
    };
    
    process.on('SIGINT', shutdown);
    process.on('SIGTERM', shutdown);
    
    logger.info('ArbitrageBot is running. Press CTRL+C to stop.');

    // Log statistics periodically
    setInterval(() => {
      const stats = arbitrageBot.getStatistics
      logger.info(`Statistics: ${JSON.stringify(stats, null, 2)}`);
    },
    
  }
   // Log statistics periodically
setInterval(() => {
  const stats = arbitrageBot.getStatistics(); // Added parentheses to call the method
  logger.info(`Statistics: ${JSON.stringify(stats, null, 2)}`);
}, 60000); // Added interval parameter (60000ms = 1 minute)

// Start the application
main().catch(error => {
  logger.error(`Unhandled error: ${error.message}`);
  process.exit(1);
});