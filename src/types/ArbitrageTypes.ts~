// src/types/ArbitrageTypes.ts
import { Token } from './TokenTypes';

export interface DEXQuotes {
  pair: string;
  baseToken: Token;
  quoteToken: Token;
  from: string;
  to: string;
  amountIn: bigint;
  amountOut?: bigint;
  quickswap: { forwardOut: bigint; reverseOut: bigint; };
  sushiswap: { forwardOut: bigint; reverseOut: bigint; };
  projectedProfit?: number;
  profitPercentage?: number;
  entropyFactor: number;
}

export interface ArbitrageStrategy {
  pair: string;
  baseToken: Token;
  quoteToken: Token;
  dex1: string;
  dex2: string;
  path1: string[];
  path2: string[];
  amountIn: bigint;
  flashLoanAmount: bigint;
  minAmountOut: bigint;
  estimatedProfit: bigint;
  profitPercentage: number;
  profitUsd: number;
  optimalPathScore: number;
  strategyHash: string;
  entropyFactor: number;
}

export interface ArbitrageOptions {
  minProfitPercentage: number;
  minProfitUsd: number;
  maxGasCostRatio: number;
  slippageTolerance: number;
  adaptiveBatchSize: boolean;
  flashLoanProtocol: FlashLoanProtocol;
}

export enum FlashLoanProtocol {
  AAVE = 'aave',
  BALANCER = 'balancer',
  CUSTOM = 'custom'
}

export interface ExecutionResult {
  success: boolean;
  txHash?: string;
  profit?: string;
  profitUsd?: number;
  gasUsed?: bigint;
  gasPrice?: bigint;
  executionTimeMs?: number;
  error?: string;
}

export interface ArbitrageDetectionStats {
  totalDetections: number;
  successfulDetections: number;
  failedDetections: number;
  averageDetectionTimeMs: number;
  totalOpportunities: number;
}