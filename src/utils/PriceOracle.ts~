// src/utils/PriceOracle.ts
import axios from 'axios';
import { logger } from './Logger';

/**
 * Enhanced PriceOracle with improved caching and reliability
 * Provides token price data from various sources
 */
export class PriceOracle {
  // Cache token prices to reduce API calls
  private priceCache: Map<string, { price: number, timestamp: number }> = new Map();
  private readonly CACHE_TTL = 60 * 1000; // 1 minute
  private readonly DEFAULT_PRICE = 1.0;
  
  // Fallback prices for common tokens
  private readonly FALLBACK_PRICES: Record<string, number> = {
    // WMATIC on Polygon
    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270': 0.7,
    // WETH on Polygon
    '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619': 1800,
    // USDC on Polygon
    '0x2791bca1f2de4661ed88a30c99a7a9449aa84174': 1.0,
    // USDT on Polygon
    '0xc2132d05d31c914a87c6611c10748aeb04b58e8f': 1.0,
    // DAI on Polygon
    '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063': 1.0,
    // WBTC on Polygon
    '0x1bfd67037b42cf73acf2047067bd4f2c47d9bfd6': 40000
  };
  
  /**
   * Initialize the price oracle
   */
  constructor() {
    logger.info('PriceOracle initialized');
  }
  
  /**
   * Initialize connections to price sources
   */
  public async initialize(): Promise<void> {
    try {
      // Preload common token prices
      const commonTokens = Object.keys(this.FALLBACK_PRICES);
      
      // Make initial API calls in parallel
      const pricePromises = commonTokens.map(token => this.getTokenPrice(token));
      await Promise.allSettled(pricePromises);
      
      logger.info('PriceOracle initialized with common token prices');
    } catch (error) {
      logger.warn('Failed to initialize PriceOracle, will use fallback prices');
    }
  }
  
  /**
   * Get token price in USD
   */
  public async getTokenPrice(tokenAddress: string): Promise<number> {
    tokenAddress = tokenAddress.toLowerCase();
    
    // Check cache first
    const cachedData = this.priceCache.get(tokenAddress);
    if (cachedData && (Date.now() - cachedData.timestamp) < this.CACHE_TTL) {
      return cachedData.price;
    }
    
    try {
      // Use CoinGecko API to get token price
      const response = await axios.get(
        `https://api.coingecko.com/api/v3/simple/token_price/polygon-pos?contract_addresses=${tokenAddress}&vs_currencies=usd`,
        { timeout: 5000 } // 5 second timeout
      );
      
      if (response.data && response.data[tokenAddress]) {
        const price = response.data[tokenAddress].usd;
        
        // Cache the result
        this.updateCache(tokenAddress, price);
        return price;
      }
      
      // Try fallback price
      if (this.FALLBACK_PRICES[tokenAddress]) {
        return this.FALLBACK_PRICES[tokenAddress];
      }
      
      // Default fallback
      return this.DEFAULT_PRICE;
    } catch (error) {
      logger.warn(`Error fetching price for ${tokenAddress}: ${error instanceof Error ? error.message : String(error)}`);
      
      // Use fallback price if available
      if (this.FALLBACK_PRICES[tokenAddress]) {
        return this.FALLBACK_PRICES[tokenAddress];
      }
      
      // Default fallback
      return this.DEFAULT_PRICE;
    }
  }
  
  /**
   * Update price cache
   */
  private updateCache(tokenAddress: string, price: number): void {
    this.priceCache.set(tokenAddress.toLowerCase(), {
      price,
      timestamp: Date.now()
    });
  }
  
  /**
   * Get prices for multiple tokens
   */
  public async getMultipleTokenPrices(tokenAddresses: string[]): Promise<Record<string, number>> {
    // Normalize addresses
    const normalizedAddresses = tokenAddresses.map(address => address.toLowerCase());
    
    // Create batches to avoid API limits
    const batchSize = 25;
    const batches: string[][] = [];
    
    for (let i = 0; i < normalizedAddresses.length; i += batchSize) {
      batches.push(normalizedAddresses.slice(i, i + batchSize));
    }
    
    const results: Record<string, number> = {};
    
    // Process batches
    for (const batch of batches) {
      const pricePromises = batch.map(address => 
        this.getTokenPrice(address).then(price => ({ address, price }))
      );
      
      const priceResults = await Promise.allSettled(pricePromises);
      
      // Process results
      for (const result of priceResults) {
        if (result.status === 'fulfilled') {
          results[result.value.address] = result.value.price;
        }
      }
    }
    
    return results;
  }
  
  /**
   * Clear price cache
   */
  public clearCache(): void {
    this.priceCache.clear();
    logger.info('PriceOracle cache cleared');
  }
}